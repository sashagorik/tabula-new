{"version":3,"file":"react-telegram-web-app.modern.js","sources":["../src/MainButton.tsx","../src/BackButton.tsx","../src/useShowPopup.ts","../src/useHapticFeedback.ts","../src/useThemeParams.ts","../src/useScanQrPopup.ts","../src/useReadTextFromClipboard.ts","../src/useSwitchInlineQuery.ts","../src/useExpand.ts"],"sourcesContent":["import { FC, useEffect } from 'react';\n\n/**\n * The props type of {@link MainButton | `MainButton`}.\n */\nexport interface MainButtonProps {\n  /**\n   * Current button text\n   * @defaultValue Set to `CONTINUE` by default\n   */\n  text?: string;\n  /**\n   * The button progress state indicator.\n   * @defaultValue  Set to `false` by default\n   */\n  progress?: boolean;\n  /**\n   * The button disable state.\n   * @defaultValue Set to `false` y defaults\n   */\n  disable?: boolean;\n  /** The button press event handler */\n  onClick?: () => void;\n  /**\n   * Current button color.\n   * @defaultValue Set to themeParams.button_color by default\n   */\n  color?: string;\n  /**\n   * Current button text color\n   * @defaultValue Set to themeParams.button_text_color by default\n   */\n  textColor?: string;\n}\n\n/**\n * Renders a {@link telegram!MainButton} component in React app as {@link react!Component}\n *\n * ```tsx\n * import { MainButton } from \"@vkruglikov/react-telegram-web-app\";\n *\n * <MainButton\n *     text=\"CLICK ME\"\n *     onClick={() => console.log('Hello, I am button!')}\n * />\n * ```\n * @returns Component always returns `null`. Not renders any elements\n * @group React Components\n */\nconst MainButton: FC<MainButtonProps> = ({\n  text = 'CONTINUE',\n  progress = false,\n  disable = false,\n  color,\n  textColor,\n  onClick,\n}): null => {\n  const WebApp = typeof window !== 'undefined' ? window.Telegram.WebApp : null;\n  const WebAppMainButton = WebApp?.MainButton;\n\n  if (!WebAppMainButton || !WebApp) return null;\n\n  useEffect(() => {\n    WebAppMainButton.setParams({\n      color: color || WebApp.themeParams.button_color || '#fff',\n    });\n  }, [color]);\n\n  useEffect(() => {\n    WebAppMainButton.setParams({\n      text_color: textColor || WebApp.themeParams.button_text_color || '#000',\n    });\n  }, [textColor]);\n\n  useEffect(() => {\n    WebAppMainButton.setText(text);\n  }, [text]);\n\n  useEffect(() => {\n    if (WebAppMainButton.isActive && disable) {\n      WebAppMainButton.disable();\n    } else if (!WebAppMainButton.isActive && !disable) {\n      WebAppMainButton.enable();\n    }\n  }, [disable]);\n\n  useEffect(() => {\n    if (!WebAppMainButton.isProgressVisible && progress) {\n      WebAppMainButton.showProgress(false);\n    } else if (WebAppMainButton.isProgressVisible && !progress) {\n      WebAppMainButton.hideProgress();\n    }\n  }, [progress]);\n\n  useEffect(() => {\n    if (!onClick) {\n      return;\n    }\n\n    WebAppMainButton.onClick(onClick);\n    return () => {\n      WebAppMainButton.offClick(onClick);\n    };\n  }, [onClick]);\n\n  useEffect(() => {\n    WebAppMainButton.show();\n    return () => {\n      WebAppMainButton.hide();\n    };\n  }, []);\n\n  return null;\n};\n\nexport default MainButton;\n","import { FC, useEffect } from 'react';\n\n/**\n * The props type of {@link BackButton | `BackButton`}.\n */\nexport interface BackButtonProps {\n  /** The back button press event handler */\n  onClick: () => void;\n}\n\n/**\n * Renders a {@link telegram!BackButton} component in React app as {@link react!Component}\n *\n * ```tsx\n * import { BackButton } from \"@vkruglikov/react-telegram-web-app\";\n *\n * <BackButton\n *     onClick={() => console.log('Hello, I am back button!')}\n * />\n * ```\n * @returns Component always returns `null`. Not renders any elements\n * @group React Components\n */\nconst BackButton: FC<BackButtonProps> = ({ onClick }) => {\n  const WebAppBackButton =\n    typeof window !== 'undefined' ? window?.Telegram?.WebApp?.BackButton : null;\n  if (!WebAppBackButton) return null;\n\n  useEffect(() => {\n    WebAppBackButton.show();\n    return () => {\n      WebAppBackButton.hide();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!onClick) {\n      return;\n    }\n\n    WebAppBackButton.onClick(onClick);\n    return () => {\n      WebAppBackButton.offClick(onClick);\n    };\n  }, [onClick]);\n\n  return null;\n};\n\nexport default BackButton;\n","import { useCallback } from 'react';\n\n/**\n * You have to see original interface {@link telegram!PopupButton}.\n */\nexport interface ShowPopupButton extends Record<string, unknown> {\n  /**\n   * Optional. Identifier of the button, 0-64 characters.\n   * Set to empty string by default.\n   * If the button is pressed, its id is returned in the callback and the popupClosed event.\n   */\n  id?: string;\n  /**\n   * Optional. Type of the button.\n   * Set to default by default.\n   */\n  type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive' | string;\n  /**\n   * Optional. The text to be displayed on the button, 0-64 characters.\n   * Required if type is default or destructive.\n   * Irrelevant for other types.\n   */\n  text?: string;\n}\n\n/**\n * You have to see original interface {@link telegram!PopupParams}.\n */\nexport interface ShowPopupParams extends Record<string, unknown> {\n  /**\n   * Optional. The text to be displayed in the popup title, 0-64 characters.\n   */\n  title?: string;\n  /**\n   * The message to be displayed in the body of the popup, 1-256 characters.\n   */\n  message: string;\n  /**\n   * Optional. List of buttons to be displayed in the popup, 1-3 buttons\n   */\n  buttons?: ShowPopupButton[];\n}\n\n/**\n * Then function provided Promise, and resolve the field id of the pressed button will be passed.\n * @return Button id as string, it was described by {@link ShowPopupButton}\n * @throws\n */\nexport type ShowPopupFunction = (params: ShowPopupParams) => Promise<string>;\n\n/**\n * The hook provided showPopup function of the type {@link ShowPopupFunction}.\n * The function that shows a native popup described by the params argument of the type {@link ShowPopupParams}.\n * @group Hooks\n */\nconst useShowPopup: () => ShowPopupFunction = () =>\n  useCallback(\n    params =>\n      new Promise((resolve, reject) => {\n        try {\n          window.Telegram.WebApp.showPopup(params, (buttonId: string) => {\n            resolve(buttonId);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      }),\n    [],\n  );\n\nexport default useShowPopup;\n","import { useCallback } from 'react';\n\n/**\n * A method tells that an impact occurred. The Telegram app may play the appropriate haptics based on style value passed. Style can be one of these values:\n * - light, indicates a collision between small or lightweight UI objects,\n * - medium, indicates a collision between medium-sized or medium-weight UI objects,\n * - heavy, indicates a collision between large or heavyweight UI objects,\n * - rigid, indicates a collision between hard or inflexible UI objects,\n * - soft, indicates a collision between soft or flexible UI objects.\n * {@link telegram!HapticFeedback}\n */\nexport type ImpactOccurredFunction = (\n  style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft',\n) => void;\n\n/**\n * A method tells that a task or action has succeeded, failed, or produced a warning. The Telegram app may play the appropriate haptics based on type value passed. Type can be one of these values:\n * - error, indicates that a task or action has failed,\n * - success, indicates that a task or action has completed successfully,\n * - warning, indicates that a task or action produced a warning.\n * {@link telegram!HapticFeedback}\n */\nexport type NotificationOccurredFunction = (\n  type: 'error' | 'success' | 'warning',\n) => void;\n\n/**\n * A method tells that the user has changed a selection. The Telegram app may play the appropriate haptics.\n * {@link telegram!HapticFeedback}\n */\nexport type SelectionChangedFunction = () => void;\n\nconst impactOccurred: ImpactOccurredFunction = style => {\n  window.Telegram.WebApp.HapticFeedback.impactOccurred(style);\n};\n\nconst notificationOccurred: NotificationOccurredFunction = type => {\n  window.Telegram.WebApp.HapticFeedback.notificationOccurred(type);\n};\n\nconst selectionChanged: SelectionChangedFunction = () => {\n  window.Telegram.WebApp.HapticFeedback.selectionChanged();\n};\n\n/**\n * This hook that provided {@link ImpactOccurredFunction}, {@link NotificationOccurredFunction} and {@link SelectionChangedFunction} functions that controls haptic feedback.\n * You have to look original telegram description {@link telegram!HapticFeedback}, because it Hook implementing his.\n * @group Hooks\n */\nconst useHapticFeedback = (): readonly [\n  ImpactOccurredFunction,\n  NotificationOccurredFunction,\n  SelectionChangedFunction,\n] => [impactOccurred, notificationOccurred, selectionChanged] as const;\n\nexport default useHapticFeedback;\n","import { useEffect, useState } from 'react';\n\n/**\n * This object contains the user's current theme settings.\n * This object implement original Telegram WebApp type of {@link telegram!ThemeParams}\n */\nexport interface ThemeParams {\n  /**\n   * Background color in the #RRGGBB format.\n   */\n  bg_color?: string;\n  /**\n   * Main text color in the #RRGGBB format.\n   */\n  text_color?: string;\n  /**\n   * Hint text color in the #RRGGBB format.\n   */\n  hint_color?: string;\n  /**\n   * Link color in the #RRGGBB format.\n   */\n  link_color?: string;\n  /**\n   * Button color in the #RRGGBB format.\n   */\n  button_color?: string;\n  /**\n   * Button text color in the #RRGGBB format.\n   */\n  button_text_color?: string;\n  /**\n   * Secondary background color in the #RRGGBB format.\n   */\n  secondary_bg_color?: string;\n}\n\n/**\n * The color scheme currently used in the Telegram app. Either “light” or “dark”.\n * Can `undefined`, if `window` is undefined.\n */\nexport type ColorScheme = 'light' | 'dark' | undefined;\n\n/**\n * The hook provided colorScheme and themeParams values of the type {@link ColorScheme} and {@link ThemeParams}.\n * @group Hooks\n */\nconst useThemeParams: () => readonly [ColorScheme, ThemeParams] = () => {\n  const [colorScheme, setColor] = useState<ColorScheme>(\n    typeof window !== 'undefined'\n      ? window.Telegram.WebApp.colorScheme\n      : undefined,\n  );\n  const [themeParams, setThemeParams] = useState<ThemeParams>(\n    typeof window !== 'undefined' ? window.Telegram.WebApp.themeParams : {},\n  );\n\n  useEffect(() => {\n    const eventHandler = () => {\n      setColor(window.Telegram.WebApp.colorScheme);\n      setThemeParams(window.Telegram.WebApp.themeParams);\n    };\n\n    window.Telegram.WebApp.onEvent('themeChanged', eventHandler);\n    return () => {\n      window.Telegram.WebApp.offEvent('themeChanged', eventHandler);\n    };\n  }, []);\n\n  return [colorScheme, themeParams] as const;\n};\n\nexport default useThemeParams;\n","/**\n * If an optional callback parameter was passed, the callback function will be called and the text from the QR\n * code will be passed as the first argument.\n * Returning true inside this callback function causes the popup to be closed.\n */\nexport type ScanQrPopupCallback = (text: string) => true | void;\n\n/**\n * This object describes the native popup for scanning QR codes.\n * You have to see original interface {@link telegram!ScanQrPopupParams}.\n */\nexport interface ScanQrPopupParams {\n  /**\n   * The text to be displayed under the 'Scan QR' heading, 0-64 characters.\n   */\n  text: string;\n}\n\n/**\n * A method that shows a native popup for scanning a QR code described\n * by the params argument of the type {@link ScanQrPopupParams}.\n */\nexport type ShowScanQrPopupFunction = (\n  params: ScanQrPopupParams,\n  callback?: ScanQrPopupCallback,\n) => void;\n\n/**\n * A method that closes the native popup for scanning a QR code opened with the showScanQrPopup method\n */\nexport type CloseScanQrPopupFunction = () => void;\n\nconst showScanQrPopup: ShowScanQrPopupFunction = (params, callback) => {\n  window.Telegram.WebApp.showScanQrPopup(params, callback);\n};\n\nconst closeScanQrPopup: CloseScanQrPopupFunction = () => {\n  window.Telegram.WebApp.closeScanQrPopup();\n};\n\n/**\n * The hook provided showScanQrPopup function of the type {@link ShowScanQrPopupFunction} and closeScanQrPopup {@link CloseScanQrPopupFunction}.\n * @group Hooks\n */\nconst useScanQrPopup = (): readonly [\n  ShowScanQrPopupFunction,\n  CloseScanQrPopupFunction,\n] => [showScanQrPopup, closeScanQrPopup] as const;\n\nexport default useScanQrPopup;\n","import { useCallback } from 'react';\n\n/**\n * This function provided Promise function that read text from clipboard\n * @return {Promise<string>}\n */\nexport type ReadTextFromClipboardFunction = () => Promise<string>;\n\n/**\n * This hook that provided {@link ReadTextFromClipboardFunction} Promise function that read text from clipboard.\n * You have to look original description readTextFromClipboard in {@link telegram!WebApp}, because hook just implements his.\n * @return {ReadTextFromClipboardFunction}\n * @group Hooks\n */\nconst readTextFromClipboard = (): ReadTextFromClipboardFunction =>\n  useCallback(\n    () =>\n      new Promise(resolve => {\n        window.Telegram.WebApp.readTextFromClipboard(resolve);\n      }),\n    [],\n  );\n\nexport default readTextFromClipboard;\n","/**\n * This function that inserts the bot's username and the specified inline query in the current chat's input field\n * You have to look original description switchInlineQuery in {@link telegram!WebApp} for more information\n */\nexport type SwitchInlineQueryFunction = (\n  query: string,\n  chatType: 'users' | 'bots' | 'groups' | 'channels',\n) => void;\n\nconst switchInlineQuery: SwitchInlineQueryFunction = (query, chatType) =>\n  window.Telegram.WebApp.switchInlineQuery(query, chatType);\n\n/**\n * This hook that provided {@link SwitchInlineQueryFunction}\n * You have to look original description switchInlineQuery in {@link telegram!WebApp}, because hook just implements his.\n * @return {SwitchInlineQueryFunction}\n * @group Hooks\n */\nconst useSwitchInlineQuery = (): SwitchInlineQueryFunction => switchInlineQuery;\n\nexport default useSwitchInlineQuery;\n","import { DispatchWithoutAction, useEffect, useState } from 'react';\n\nconst getIsExpanded = () => window.Telegram.WebApp.isExpanded;\nconst expand: DispatchWithoutAction = () => window.Telegram.WebApp.expand();\n\n/**\n * This hook provided isExpanded state, and expand() handle\n * You have to look original description in {@link telegram!WebApp} for more information*\n *\n * ```typescript\n * import { useExpand } from \"@vkruglikov/react-telegram-web-app\";\n *\n * const [isExpanded, expand] = useExpand();\n * ```\n *\n * @privateRemarks\n * Api doesn't provide event for listening isExpanded, so we use\n * viewportChanged, but it is an unsafe way\n *\n * @group Hooks\n */\nconst useExpand = (): readonly [boolean, DispatchWithoutAction] => {\n  const [isExpanded, setIsExpanded] = useState(getIsExpanded);\n\n  useEffect(() => {\n    const handleEvent = (payload: { isStateStable: boolean }) => {\n      if (payload.isStateStable) {\n        setIsExpanded(getIsExpanded());\n      }\n    };\n\n    window.Telegram.WebApp.onEvent('viewportChanged', handleEvent);\n    return () =>\n      window.Telegram.WebApp.offEvent('viewportChanged', handleEvent);\n  }, []);\n\n  return [isExpanded, expand] as const;\n};\n\nexport default useExpand;\n"],"names":["MainButton","text","progress","disable","color","textColor","onClick","WebApp","window","Telegram","WebAppMainButton","useEffect","setParams","themeParams","button_color","text_color","button_text_color","setText","isActive","enable","isProgressVisible","showProgress","hideProgress","offClick","show","hide","BackButton","_window","_window$Telegram","_window$Telegram$WebA","WebAppBackButton","useShowPopup","useCallback","params","Promise","resolve","reject","showPopup","buttonId","e","impactOccurred","style","HapticFeedback","notificationOccurred","type","selectionChanged","useHapticFeedback","useThemeParams","colorScheme","setColor","useState","undefined","setThemeParams","eventHandler","onEvent","offEvent","showScanQrPopup","callback","closeScanQrPopup","useScanQrPopup","readTextFromClipboard","switchInlineQuery","query","chatType","useSwitchInlineQuery","getIsExpanded","isExpanded","expand","useExpand","setIsExpanded","handleEvent","payload","isStateStable"],"mappings":"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"}